[
  {
    "text": "SCRIPT-8 is a state-of-the-art machine with advanced computing capability.\nIt has 32K RAM, high-resolution 8-color graphics, 4 audio channels, and a built-in powerful programming environment.\n",
    "code": "\n\n"
  },
  {
    "text": "We will demonstrate SCRIPT-8's superior capabilities by making a basic pong game.\nLet's begin.\n",
    "code": "\n\n"
  },
  {
    "text": "All SCRIPT-8 games have update and draw subroutines.\nEvery 60th of a second, the update subroutine is called, followed by the draw subroutine.\n",
    "code": "\nscript8.update = function() {\n\n}\n\nscript8.draw = function() {\n\n}\n"
  },
  {
    "text": "Our game will have two shapes: a paddle and a ball.\nLet's draw the paddle first.\n",
    "code": "\nscript8.update = function() {\n\n}\n\nscript8.draw = function() {\n\n}\n"
  },
  {
    "text": "The rectFill subroutine draws a filled rectangle.\nIt takes 5 parameters: (x, y, width, height, color).\nLet's draw the ball next.\n",
    "code": "\nscript8.update = function() {\n\n}\n\nscript8.draw = function() {\n\n  // draw paddle\n  rectFill(52, 122, 24, 4, 3)\n\n}\n"
  },
  {
    "text": "The circFill subroutine draws a filled circle.\nIt takes 4 parameters: (x, y, radius, color).\nWe should probably use a different color for the game background. Let's do that.\n",
    "code": "\nscript8.update = function() {\n\n}\n\nscript8.draw = function() {\n\n  // draw paddle\n  rectFill(52, 122, 24, 4, 3)\n\n  // draw ball\n  circFill(64, 64, 4, 1)\n\n}\n"
  },
  {
    "text": "As the background shows, the SCRIPT-8 display is 128 by 128 pixels.\nPlay around with the code. See if you can change the color of the ball.\nYou could also try drawing multiple balls.\n",
    "code": "\nscript8.update = function() {\n\n}\n\nscript8.draw = function() {\n\n  // draw background\n  rectFill(0, 0, 128, 128, 6)\n\n  // draw paddle\n  rectFill(52, 122, 24, 4, 3)\n\n  // draw ball\n  circFill(64, 64, 4, 1)\n\n}\n"
  },
  {
    "text": "Alright, let's continue. Our game needs movement.\nBefore we go any further, let's do a bit of organizing.\nWe'll create an object to hold the paddle data.\n",
    "code": "\nscript8.update = function() {\n\n}\n\nscript8.draw = function() {\n\n  // draw background\n  rectFill(0, 0, 128, 128, 6)\n\n  // draw paddle\n  rectFill(52, 122, 24, 4, 3)\n\n  // draw ball\n  circFill(64, 64, 4, 1)\n\n}\n"
  },
  {
    "text": "Let's also create a ball object.\n",
    "code": "\nconst paddle = { x: 52, y: 122, width: 24, height: 4 }\n\nscript8.update = function() {\n\n}\n\nscript8.draw = function() {\n\n  // draw background\n  rectFill(0, 0, 128, 128, 6)\n\n  // draw paddle\n  rectFill(paddle.x, paddle.y, paddle.width, paddle.height, 3)\n\n  // draw ball\n  circFill(64, 64, 4, 1)\n\n}\n"
  },
  {
    "text": "Good.\nNow let's control the paddle with the cursor keys.\n",
    "code": "\nconst paddle = { x: 52, y: 122, width: 24, height: 4 }\nconst ball = { x: 64, y: 64, radius: 4 }\n\nscript8.update = function() {\n\n}\n\nscript8.draw = function() {\n\n  // draw background\n  rectFill(0, 0, 128, 128, 6)\n\n  // draw paddle\n  rectFill(paddle.x, paddle.y, paddle.width, paddle.height, 3)\n\n  // draw ball\n  circFill(ball.x, ball.y, ball.radius, 1)\n\n}\n"
  },
  {
    "text": "Click RUN (menu top right) and try pressing the left and right arrow keys.\nYou should see the paddle move.\nLet's also make the ball move. We'll update its position every cycle (which happens every 60th of a second).\n",
    "code": "\nconst paddle = { x: 52, y: 122, width: 24, height: 4 }\nconst ball = { x: 64, y: 64, radius: 4 }\n\nfunction movePaddle () {\n  if (arrowLeft) paddle.x -= 3\n  if (arrowRight) paddle.x += 3\n}\n\nscript8.update = function() {\n  movePaddle()\n}\n\nscript8.draw = function() {\n\n  // draw background\n  rectFill(0, 0, 128, 128, 6)\n\n  // draw paddle\n  rectFill(paddle.x, paddle.y, paddle.width, paddle.height, 3)\n\n  // draw ball\n  circFill(ball.x, ball.y, ball.radius, 1)\n\n}\n"
  },
  {
    "text": "Now the ball has movement - but it flies off the screen, instead of bouncing back.\nAs with the previous screen, you'll have to click RUN to see the ball move. This underscores an important point: during editing, SCRIPT-8 only executes the update and draw subroutines once.\nLet's make the ball bounce.\n",
    "code": "\nconst paddle = { x: 52, y: 122, width: 24, height: 4 }\nconst ball = { x: 64, y: 64, radius: 4, xDir: 3, yDir: -2 }\n\nfunction moveBall () {\n  ball.x += ball.xDir\n  ball.y += ball.yDir\n}\n\nfunction movePaddle () {\n  if (arrowLeft) paddle.x -= 3\n  if (arrowRight) paddle.x += 3\n}\n\nscript8.update = function() {\n  movePaddle()\n  moveBall()\n}\n\nscript8.draw = function() {\n\n  // draw background\n  rectFill(0, 0, 128, 128, 6)\n\n  // draw paddle\n  rectFill(paddle.x, paddle.y, paddle.width, paddle.height, 3)\n\n  // draw ball\n  circFill(ball.x, ball.y, ball.radius, 1)\n\n}\n"
  },
  {
    "text": "That's better - the ball bounces off the side and top walls.\nRemember to click RUN to see changes over time. This will be the last time we mention this.\nWe should probably make the ball bounce off the paddle, too.\n",
    "code": "\nconst paddle = { x: 52, y: 122, width: 24, height: 4 }\nconst ball = { x: 64, y: 64, radius: 4, xDir: 3, yDir: -2 }\n\nfunction bounceBall () {\n  // bounce left\n  if (ball.x < ball.radius) ball.xDir *= -1\n  // bounce right\n  if (ball.x > 128 - ball.radius) ball.xDir *= -1\n  // bounce top\n  if (ball.y < ball.radius) ball.yDir *= -1\n}\n\nfunction moveBall () {\n  ball.x += ball.xDir\n  ball.y += ball.yDir\n}\n\nfunction movePaddle () {\n  if (arrowLeft) paddle.x -= 3\n  if (arrowRight) paddle.x += 3\n}\n\nscript8.update = function() {\n  movePaddle()\n  bounceBall()\n  moveBall()\n}\n\nscript8.draw = function() {\n\n  // draw background\n  rectFill(0, 0, 128, 128, 6)\n\n  // draw paddle\n  rectFill(paddle.x, paddle.y, paddle.width, paddle.height, 3)\n\n  // draw ball\n  circFill(ball.x, ball.y, ball.radius, 1)\n\n}\n"
  },
  {
    "text": "What happens if the paddle misses? The ball disappears.\nLet's fix that. If the paddle misses, we'll place the ball back in the middle.\n",
    "code": "\nconst paddle = { x: 52, y: 122, width: 24, height: 4 }\nconst ball = { x: 64, y: 64, radius: 4, xDir: 3, yDir: -2 }\n\nfunction bouncePaddle () {\n  if (\n    ball.x >= paddle.x &&\n    ball.x <= paddle.x + paddle.width &&\n    ball.y > paddle.y - paddle.height\n  ) {\n    ball.yDir *= -1\n  }\n}\n\nfunction bounceBall () {\n  // bounce left\n  if (ball.x < ball.radius) ball.xDir *= -1\n  // bounce right\n  if (ball.x > 128 - ball.radius) ball.xDir *= -1\n  // bounce top\n  if (ball.y < ball.radius) ball.yDir *= -1\n}\n\nfunction moveBall () {\n  ball.x += ball.xDir\n  ball.y += ball.yDir\n}\n\nfunction movePaddle () {\n  if (arrowLeft) paddle.x -= 3\n  if (arrowRight) paddle.x += 3\n}\n\nscript8.update = function() {\n  movePaddle()\n  bounceBall()\n  bouncePaddle()\n  moveBall()\n}\n\nscript8.draw = function() {\n\n  // draw background\n  rectFill(0, 0, 128, 128, 6)\n\n  // draw paddle\n  rectFill(paddle.x, paddle.y, paddle.width, paddle.height, 3)\n\n  // draw ball\n  circFill(ball.x, ball.y, ball.radius, 1)\n\n}\n"
  },
  {
    "text": "We now have the mechanics of a basic game.\nNext let's add a scoring mechanism.\nWe'll award points for every paddle bounce.\n",
    "code": "\nconst paddle = { x: 52, y: 122, width: 24, height: 4 }\nconst ball = { x: 64, y: 64, radius: 4, xDir: 3, yDir: -2 }\n\nfunction loseDeadBall () {\n  if (ball.y > 128 - ball.radius) {\n    ball.y = 24\n  }\n}\n\nfunction bouncePaddle () {\n  if (\n    ball.x >= paddle.x &&\n    ball.x <= paddle.x + paddle.width &&\n    ball.y > paddle.y - paddle.height\n  ) {\n    ball.yDir *= -1\n  }\n}\n\nfunction bounceBall () {\n  // bounce left\n  if (ball.x < ball.radius) ball.xDir *= -1\n  // bounce right\n  if (ball.x > 128 - ball.radius) ball.xDir *= -1\n  // bounce top\n  if (ball.y < ball.radius) ball.yDir *= -1\n}\n\nfunction moveBall () {\n  ball.x += ball.xDir\n  ball.y += ball.yDir\n}\n\nfunction movePaddle () {\n  if (arrowLeft) paddle.x -= 3\n  if (arrowRight) paddle.x += 3\n}\n\nscript8.update = function() {\n  movePaddle()\n  bounceBall()\n  bouncePaddle()\n  moveBall()\n  loseDeadBall()\n}\n\nscript8.draw = function() {\n\n  // draw background\n  rectFill(0, 0, 128, 128, 6)\n\n  // draw paddle\n  rectFill(paddle.x, paddle.y, paddle.width, paddle.height, 3)\n\n  // draw ball\n  circFill(ball.x, ball.y, ball.radius, 1)\n\n}\n"
  },
  {
    "text": "We need a way to penalize poor playing.\nWe'll start the game with three balls.\n",
    "code": "\nconst paddle = { x: 52, y: 122, width: 24, height: 4 }\nconst ball = { x: 64, y: 64, radius: 4, xDir: 3, yDir: -2 }\nlet score = 0\n\nfunction loseDeadBall () {\n  if (ball.y > 128 - ball.radius) {\n    ball.y = 24\n  }\n}\n\nfunction bouncePaddle () {\n  if (\n    ball.x >= paddle.x &&\n    ball.x <= paddle.x + paddle.width &&\n    ball.y > paddle.y - paddle.height\n  ) {\n    ball.yDir *= -1\n    score += 10\n  }\n}\n\nfunction bounceBall () {\n  // bounce left\n  if (ball.x < ball.radius) ball.xDir *= -1\n  // bounce right\n  if (ball.x > 128 - ball.radius) ball.xDir *= -1\n  // bounce top\n  if (ball.y < ball.radius) ball.yDir *= -1\n}\n\nfunction moveBall () {\n  ball.x += ball.xDir\n  ball.y += ball.yDir\n}\n\nfunction movePaddle () {\n  if (arrowLeft) paddle.x -= 3\n  if (arrowRight) paddle.x += 3\n}\n\nscript8.update = function() {\n  movePaddle()\n  bounceBall()\n  bouncePaddle()\n  moveBall()\n  loseDeadBall()\n}\n\nscript8.draw = function() {\n\n  // draw background\n  rectFill(0, 0, 128, 128, 6)\n\n  // draw score\n  print(12, 6, score, 3)\n\n  // draw paddle\n  rectFill(paddle.x, paddle.y, paddle.width, paddle.height, 3)\n\n  // draw ball\n  circFill(ball.x, ball.y, ball.radius, 1)\n\n}\n"
  },
  {
    "text": "It might make sense to display lives left as ball outlines.\nLet's do that.\n",
    "code": "\nconst paddle = { x: 52, y: 122, width: 24, height: 4 }\nconst ball = { x: 64, y: 64, radius: 4, xDir: 3, yDir: -2 }\nlet score = 0\nlet lives = 3\n\nfunction loseDeadBall () {\n  if (ball.y > 128 - ball.radius) {\n    lives -= 1\n    if (lives > 0) {\n      ball.y = 24\n    } else {\n      ball.yDir = 0\n      ball.xDir = 0\n      ball.y = 64\n      ball.x = 64\n    }\n  }\n}\n\nfunction bouncePaddle () {\n  if (\n    ball.x >= paddle.x &&\n    ball.x <= paddle.x + paddle.width &&\n    ball.y > paddle.y - paddle.height\n  ) {\n    ball.yDir *= -1\n    score += 10\n  }\n}\n\nfunction bounceBall () {\n  // bounce left\n  if (ball.x < ball.radius) ball.xDir *= -1\n  // bounce right\n  if (ball.x > 128 - ball.radius) ball.xDir *= -1\n  // bounce top\n  if (ball.y < ball.radius) ball.yDir *= -1\n}\n\nfunction moveBall () {\n  ball.x += ball.xDir\n  ball.y += ball.yDir\n}\n\nfunction movePaddle () {\n  if (arrowLeft) paddle.x -= 3\n  if (arrowRight) paddle.x += 3\n}\n\nscript8.update = function() {\n  movePaddle()\n  bounceBall()\n  bouncePaddle()\n  moveBall()\n  loseDeadBall()\n}\n\nscript8.draw = function() {\n\n  // draw background\n  rectFill(0, 0, 128, 128, 6)\n\n  // if no lives left, display game over\n  if (lives < 1) {\n    print(47, 34, 'game over', 0)\n    print(47, 44, `score  ${score}`, 2)\n  } else {\n    // draw score\n    print(12, 6, score, 3)\n\n    // draw lives\n    print(90, 6, lives, 3)\n  }\n\n  // draw paddle\n  rectFill(paddle.x, paddle.y, paddle.width, paddle.height, 3)\n\n  // draw ball\n  circFill(ball.x, ball.y, ball.radius, 1)\n\n}\n"
  },
  {
    "text": "Our basic game is now complete.\n",
    "code": "\nconst paddle = { x: 52, y: 122, width: 24, height: 4 }\nconst ball = { x: 64, y: 64, radius: 4, xDir: 3, yDir: -2 }\nlet score = 0\nlet lives = 3\n\nfunction loseDeadBall () {\n  if (ball.y > 128 - ball.radius) {\n    lives -= 1\n    if (lives > 0) {\n      ball.y = 24\n    } else {\n      ball.yDir = 0\n      ball.xDir = 0\n      ball.y = 64\n      ball.x = 64\n    }\n  }\n}\n\nfunction bouncePaddle () {\n  if (\n    ball.x >= paddle.x &&\n    ball.x <= paddle.x + paddle.width &&\n    ball.y > paddle.y - paddle.height\n  ) {\n    ball.yDir *= -1\n    score += 10\n  }\n}\n\nfunction bounceBall () {\n  // bounce left\n  if (ball.x < ball.radius) ball.xDir *= -1\n  // bounce right\n  if (ball.x > 128 - ball.radius) ball.xDir *= -1\n  // bounce top\n  if (ball.y < ball.radius) ball.yDir *= -1\n}\n\nfunction moveBall () {\n  ball.x += ball.xDir\n  ball.y += ball.yDir\n}\n\nfunction movePaddle () {\n  if (arrowLeft) paddle.x -= 3\n  if (arrowRight) paddle.x += 3\n}\n\nscript8.update = function() {\n  movePaddle()\n  bounceBall()\n  bouncePaddle()\n  moveBall()\n  loseDeadBall()\n}\n\nscript8.draw = function() {\n\n  // draw background\n  rectFill(0, 0, 128, 128, 6)\n\n  // if no lives left, display game over\n  if (lives < 1) {\n    print(47, 34, 'game over', 0)\n    print(47, 44, `score  ${score}`, 2)\n  } else {\n    // draw score\n    print(12, 6, score, 3)\n\n    // draw lives\n    range(lives).forEach(i => {\n      circStroke(90 + i * 12, 8, 4, 3)\n    })\n  }\n\n  // draw paddle\n  rectFill(paddle.x, paddle.y, paddle.width, paddle.height, 3)\n\n  // draw ball\n  circFill(ball.x, ball.y, ball.radius, 1)\n\n}\n"
  },
  {
    "text": "Before we finish, see the HELP screen, which lists all available SCRIPT-8 subroutines.\nYou may also consult the <a href='https://github.com/script-8/script-8.github.io'>SCRIPT-8 repository</a> for more information.\n",
    "code": "\nconst paddle = { x: 52, y: 122, width: 24, height: 4 }\nconst ball = { x: 64, y: 64, radius: 4, xDir: 3, yDir: -2 }\nlet score = 0\nlet lives = 3\n\nfunction loseDeadBall () {\n  if (ball.y > 128 - ball.radius) {\n    lives -= 1\n    if (lives > 0) {\n      ball.y = 24\n    } else {\n      ball.yDir = 0\n      ball.xDir = 0\n      ball.y = 64\n      ball.x = 64\n    }\n  }\n}\n\nfunction bouncePaddle () {\n  if (\n    ball.x >= paddle.x &&\n    ball.x <= paddle.x + paddle.width &&\n    ball.y > paddle.y - paddle.height\n  ) {\n    ball.yDir *= -1\n    score += 10\n  }\n}\n\nfunction bounceBall () {\n  // bounce left\n  if (ball.x < ball.radius) ball.xDir *= -1\n  // bounce right\n  if (ball.x > 128 - ball.radius) ball.xDir *= -1\n  // bounce top\n  if (ball.y < ball.radius) ball.yDir *= -1\n}\n\nfunction moveBall () {\n  ball.x += ball.xDir\n  ball.y += ball.yDir\n}\n\nfunction movePaddle () {\n  if (arrowLeft) paddle.x -= 3\n  if (arrowRight) paddle.x += 3\n}\n\nscript8.update = function() {\n  movePaddle()\n  bounceBall()\n  bouncePaddle()\n  moveBall()\n  loseDeadBall()\n}\n\nscript8.draw = function() {\n\n  // draw background\n  rectFill(0, 0, 128, 128, 6)\n\n  // if no lives left, display game over\n  if (lives < 1) {\n    print(47, 34, 'game over', 0)\n    print(47, 44, `score  ${score}`, 2)\n  } else {\n    // draw score\n    print(12, 6, score, 3)\n\n    // draw lives\n    range(lives).forEach(i => {\n      circStroke(90 + i * 12, 8, 4, 3)\n    })\n  }\n\n  // draw paddle\n  rectFill(paddle.x, paddle.y, paddle.width, paddle.height, 3)\n\n  // draw ball\n  circFill(ball.x, ball.y, ball.radius, 1)\n\n}\n"
  },
  {
    "text": "Good bye.\n",
    "code": "\nconst paddle = { x: 52, y: 122, width: 24, height: 4 }\nconst ball = { x: 64, y: 64, radius: 4, xDir: 3, yDir: -2 }\nlet score = 0\nlet lives = 3\n\nfunction loseDeadBall () {\n  if (ball.y > 128 - ball.radius) {\n    lives -= 1\n    if (lives > 0) {\n      ball.y = 24\n    } else {\n      ball.yDir = 0\n      ball.xDir = 0\n      ball.y = 64\n      ball.x = 64\n    }\n  }\n}\n\nfunction bouncePaddle () {\n  if (\n    ball.x >= paddle.x &&\n    ball.x <= paddle.x + paddle.width &&\n    ball.y > paddle.y - paddle.height\n  ) {\n    ball.yDir *= -1\n    score += 10\n  }\n}\n\nfunction bounceBall () {\n  // bounce left\n  if (ball.x < ball.radius) ball.xDir *= -1\n  // bounce right\n  if (ball.x > 128 - ball.radius) ball.xDir *= -1\n  // bounce top\n  if (ball.y < ball.radius) ball.yDir *= -1\n}\n\nfunction moveBall () {\n  ball.x += ball.xDir\n  ball.y += ball.yDir\n}\n\nfunction movePaddle () {\n  if (arrowLeft) paddle.x -= 3\n  if (arrowRight) paddle.x += 3\n}\n\nscript8.update = function() {\n  movePaddle()\n  bounceBall()\n  bouncePaddle()\n  moveBall()\n  loseDeadBall()\n}\n\nscript8.draw = function() {\n\n  // draw background\n  rectFill(0, 0, 128, 128, 6)\n\n  // if no lives left, display game over\n  if (lives < 1) {\n    print(47, 34, 'game over', 0)\n    print(47, 44, `score  ${score}`, 2)\n  } else {\n    // draw score\n    print(12, 6, score, 3)\n\n    // draw lives\n    range(lives).forEach(i => {\n      circStroke(90 + i * 12, 8, 4, 3)\n    })\n  }\n\n  // draw paddle\n  rectFill(paddle.x, paddle.y, paddle.width, paddle.height, 3)\n\n  // draw ball\n  circFill(ball.x, ball.y, ball.radius, 1)\n\n}\n"
  }
]
